Student Information:

Name: Sebastian Vivo
UAID: 010849203
Assignment: lab5
Laboratory Contents:

Step #1:
//----------------------------------------------
// Purpose: Test student linked list
// Author:  John Gauch
//----------------------------------------------

#include "StudentList.h"

//----------------------------------------------
int main()
{
   // Test the student list class
   StudentList list;
   list.insertHead("John", "Johnson, AR", 3.2);
   list.insertHead("Will", "Fayetteville, AR", 3.0);
   list.insertHead("Dave", "Springdale, AR", 3.4);
   list.insertHead("Adam", "Rogers, AR", 3.6);
   list.insertHead("Bob", "Bentonville, AR", 3.8);
   list.print();
}

Step #2:
//----------------------------------------------
// Purpose: Test student linked list
// Author:  John Gauch
//----------------------------------------------

#include "StudentList.h"

//----------------------------------------------
int main()
{
   // Test the student list class
   StudentList list;
   list.insertHead("John", "Johnson, AR", 3.2);
   list.insertHead("Will", "Fayetteville, AR", 3.0);
   list.insertHead("Dave", "Springdale, AR", 3.4);
   list.insertHead("Adam", "Rogers, AR", 3.6);
   list.insertHead("Bob", "Bentonville, AR", 3.8);
   list.print();
}

Step #3:
//----------------------------------------------
// Purpose: Test student linked list
// Author:  John Gauch
//----------------------------------------------

#include "StudentList.h"

//----------------------------------------------
int main()
{
   // Test the student list class
   StudentList list;
   list.insertTail("John", "Johnson, AR", 3.2);
   list.insertTail("Will", "Fayetteville, AR", 3.0);
   list.insertTail("Dave", "Springdale, AR", 3.4);
   list.insertTail("Adam", "Rogers, AR", 3.6);
   list.insertTail("Bob", "Bentonville, AR", 3.8);
   list.print();
}

Step #4:
Tail: Run time: 1.27614 seconds
Head: Run time: 0.006696 seconds

Step #5:
//----------------------------------------------
// Purpose: Implement student linked list
// Author:  John Gauch
//----------------------------------------------

#include "StudentList.h"

//----------------------------------------------
StudentList::StudentList()
{
   Head = NULL;
}

//----------------------------------------------
StudentList::StudentList(const StudentList & list)
{
   // Create first node
   StudentNode *copy = new StudentNode();
   Head = copy;

   // Walk list to copy nodes
   StudentNode *ptr = list.Head;
   while (ptr != NULL)
   {
      copy->setNext(new StudentNode());
      copy = copy->getNext();
      copy->setName(ptr->getName());
      copy->setAddress(ptr->getAddress());
      copy->setGPA(ptr->getGPA());
      copy->setNext(NULL);
      ptr = ptr->getNext();
   }

   // Tidy first node
   copy = Head;
   Head = copy->getNext();
   delete copy;
}

//----------------------------------------------
StudentList::~StudentList()
{
}

//----------------------------------------------
void StudentList::insertHead(string name, string address, float gpa)
{
   // Insert new node
   StudentNode *ptr = new StudentNode(name, address, gpa);
   ptr->setNext(Head);
   Head = ptr;
}

//----------------------------------------------
void StudentList::insertTail(string name, string address, float gpa)
{
   // Find tail node
   StudentNode *ptr = Head;
   while ((ptr != NULL) && (ptr->getNext() != NULL))
      ptr = ptr->getNext();

   // Insert new node
   if (ptr != NULL)
      ptr->setNext(new StudentNode(name, address, gpa));
   else
      Head = new StudentNode(name, address, gpa);

}

//----------------------------------------------
StudentNode * StudentList::searchName(const string name)
{

   StudentNode *ptr = Head;
   while ((ptr != NULL) && (ptr->getName() != name))
      ptr = ptr->getNext();

   if (ptr != NULL)
      return ptr;
   else
      return NULL;

}

//----------------------------------------------
StudentNode * StudentList::searchGPA(const float gpa)
{

   StudentNode *ptr = Head;
   while ((ptr != NULL) && (ptr->getGPA() != gpa))
      ptr = ptr->getNext();

   if (ptr != NULL)
      return ptr;
   else
      return NULL;

}

//----------------------------------------------
void StudentList::print() const
{
   StudentNode *ptr = Head;
   while (ptr != NULL)
   {
      ptr->print();
      ptr = ptr->getNext();
   }
}

Step #6:
Name: Bob
Address: Bentonville, AR
GPA: 3.8
Name: Adam
Address: Rogers, AR
GPA: 3.6
Name: Dave
Address: Springdale, AR
GPA: 3.4
Name: Will
Address: Fayetteville, AR
GPA: 3
Name: John
Address: Johnson, AR
GPA: 3.2
Run time: 3.4e-05 seconds
Name: Bob
Address: Bentonville, AR
GPA: 3.8
Name: Dave
Address: Springdale, AR
GPA: 3.4
