
Step #1:
int main()
{
  Heap h;
  int num = 0;
  h.Insert(3);
  h.Print();
  h.Insert(1);
  h.Print();
  h.Insert(4);
  h.Print();
  h.Insert(1);
  h.Print();
  h.Insert(5);
  h.Print();
  h.Insert(9);
  h.Print();

  while(h.IsEmpty() == false)
  {
    h.Remove(num);
    cout << "Removed: " << num << ".\n";
    h.Print();
  }

}

Step #2:
3
3 1
4 1 3
4 1 3 1
5 4 3 1 1
9 4 5 1 1 3
Removed: 9.
5 4 3 1 1
Removed: 5.
4 1 3 1
Removed: 4.
3 1 1
Removed: 3.
1 1
Removed: 1.
1
Removed: 1.



Step #3:
7
7 4
8 4 7
8 8 7 4
10 8 7 4 8
10 8 7 4 8 2
10 8 9 4 8 2 7
10 8 9 8 8 2 7 4
10 8 9 8 8 2 7 4 8
10 8 9 8 8 2 7 4 8 4
10 8 9 8 8 2 7 4 8 4 0
10 8 9 8 8 5 7 4 8 4 0 2
12 8 10 8 8 9 7 4 8 4 0 2 5
12 8 10 8 8 9 7 4 8 4 0 2 5 2
12 8 12 8 8 9 10 4 8 4 0 2 5 2 7
Removed: 12.
12 8 10 8 8 9 7 4 8 4 0 2 5 2
Removed: 12.
10 8 9 8 8 5 7 4 8 4 0 2 2
Removed: 10.
9 8 7 8 8 5 2 4 8 4 0 2
Removed: 9.
8 8 7 8 8 5 2 4 2 4 0
Removed: 8.
8 8 7 4 8 5 2 0 2 4
Removed: 8.
8 8 7 4 4 5 2 0 2
Removed: 8.
8 4 7 2 4 5 2 0
Removed: 8.
7 4 5 2 4 0 2
Removed: 7.
5 4 2 2 4 0
Removed: 5.
4 4 2 2 0
Removed: 4.
4 2 2 0
Removed: 4.
2 0 2
Removed: 2.
2 0
Removed: 2.
0
Removed: 0.

3
7 3
9 3 7
9 3 7 0
12 9 7 0 3
12 9 7 0 3 3
12 9 9 0 3 3 7
12 9 9 9 3 3 7 0
17 12 9 9 3 3 7 0 9
17 12 9 9 3 3 7 0 9 0
17 13 9 9 12 3 7 0 9 0 3
19 13 17 9 12 9 7 0 9 0 3 3
19 13 18 9 12 17 7 0 9 0 3 3 9
19 13 18 9 12 17 16 0 9 0 3 3 9 7
19 13 18 9 12 17 16 0 9 0 3 3 9 7 15
19 17 18 13 12 17 16 9 9 0 3 3 9 7 15 0
19 17 18 13 12 17 16 9 9 0 3 3 9 7 15 0 6
19 17 18 13 12 17 16 9 12 0 3 3 9 7 15 0 6 9
19 17 18 13 12 17 16 9 12 0 3 3 9 7 15 0 6 9 7
19 17 18 13 12 17 16 9 12 10 3 3 9 7 15 0 6 9 7 0
Removed: 19.
18 17 17 13 12 9 16 9 12 10 3 3 0 7 15 0 6 9 7
Removed: 18.
17 13 17 12 12 9 16 9 9 10 3 3 0 7 15 0 6 7
Removed: 17.
17 13 16 12 12 9 15 9 9 10 3 3 0 7 7 0 6
Removed: 17.
16 13 15 12 12 9 7 9 9 10 3 3 0 6 7 0
Removed: 16.
15 13 9 12 12 3 7 9 9 10 3 0 0 6 7
Removed: 15.
13 12 9 9 12 3 7 7 9 10 3 0 0 6
Removed: 13.
12 12 9 9 10 3 7 7 9 6 3 0 0
Removed: 12.
12 10 9 9 6 3 7 7 9 0 3 0
Removed: 12.
10 9 9 9 6 3 7 7 0 0 3
Removed: 10.
9 9 9 7 6 3 7 3 0 0
Removed: 9.
9 7 9 3 6 3 7 0 0
Removed: 9.
9 7 7 3 6 3 0 0
Removed: 9.
7 6 7 3 0 3 0
Removed: 7.
7 6 3 3 0 0
Removed: 7.
6 3 3 0 0
Removed: 6.
3 0 3 0
Removed: 3.
3 0 0
Removed: 3.
0 0
Removed: 0.
0
Removed: 0.

8
8 4
24 4 8
24 4 8 4
24 21 8 4 4
24 21 17 4 4 8
24 21 22 4 4 8 17
24 21 22 18 4 8 17 4
24 21 22 18 4 8 17 4 11
24 21 22 18 10 8 17 4 11 4
24 21 22 18 20 8 17 4 11 4 10
24 21 22 18 20 8 17 4 11 4 10 3
24 21 22 18 20 16 17 4 11 4 10 3 8
24 21 22 18 20 16 19 4 11 4 10 3 8 17
24 21 22 18 20 16 19 4 11 4 10 3 8 17 7
24 21 22 18 20 16 19 4 11 4 10 3 8 17 7 1
24 21 22 18 20 16 19 4 11 4 10 3 8 17 7 1 3
24 21 22 18 20 16 19 4 11 4 10 3 8 17 7 1 3 8
24 21 22 19 20 16 19 4 18 4 10 3 8 17 7 1 3 8 11
24 21 22 19 20 16 19 4 18 18 10 3 8 17 7 1 3 8 11 4
24 21 22 19 20 16 19 4 18 18 10 3 8 17 7 1 3 8 11 4 15
24 24 22 19 21 16 19 4 18 18 20 3 8 17 7 1 3 8 11 4 15 10
24 24 22 19 21 16 19 4 18 18 21 3 8 17 7 1 3 8 11 4 15 10 20
24 24 22 19 21 16 19 4 18 18 21 5 8 17 7 1 3 8 11 4 15 10 20 3
24 24 22 19 21 16 19 4 18 18 21 5 8 17 7 1 3 8 11 4 15 10 20 3 3
Removed: 24.
24 21 22 19 21 16 19 4 18 18 20 5 8 17 7 1 3 8 11 4 15 10 3 3
Removed: 24.
22 21 19 19 21 16 17 4 18 18 20 5 8 3 7 1 3 8 11 4 15 10 3
Removed: 22.
21 21 19 19 20 16 17 4 18 18 10 5 8 3 7 1 3 8 11 4 15 3
Removed: 21.
21 20 19 19 18 16 17 4 18 15 10 5 8 3 7 1 3 8 11 4 3
Removed: 21.
20 19 19 18 18 16 17 4 11 15 10 5 8 3 7 1 3 8 3 4
Removed: 20.
19 18 19 11 18 16 17 4 8 15 10 5 8 3 7 1 3 4 3
Removed: 19.
19 18 17 11 18 16 7 4 8 15 10 5 8 3 3 1 3 4
Removed: 19.
18 18 17 11 15 16 7 4 8 4 10 5 8 3 3 1 3
Removed: 18.
18 15 17 11 10 16 7 4 8 4 3 5 8 3 3 1
Removed: 18.
17 15 16 11 10 8 7 4 8 4 3 5 1 3 3
Removed: 17.
16 15 8 11 10 5 7 4 8 4 3 3 1 3
Removed: 16.
15 11 8 8 10 5 7 4 3 4 3 3 1
Removed: 15.
11 10 8 8 4 5 7 4 3 1 3 3
Removed: 11.
10 8 8 4 4 5 7 3 3 1 3
Removed: 10.
8 4 8 3 4 5 7 3 3 1
Removed: 8.
8 4 7 3 4 5 1 3 3
Removed: 8.
7 4 5 3 4 3 1 3
Removed: 7.
5 4 3 3 4 3 1
Removed: 5.
4 4 3 3 1 3
Removed: 4.
4 3 3 3 1
Removed: 4.
3 3 3 1
Removed: 3.
3 1 3
Removed: 3.
3 1
Removed: 3.
1
Removed: 1.



Step #4:
Heap::Heap(int MaxSize)
{
  heap = new int[MaxSize];
}

//------------------------------------------------------------
// Destructor function.
//------------------------------------------------------------
Heap::~Heap()
{
  delete[] heap;
}

Step #5:
//------------------------------------------------------------
// Insert an element into the heap.
//------------------------------------------------------------
bool Heap::Insert(int num)
{
   // Check for full heap
   if (IsFull())
      return false;

   // Shuffle data up the heap
   Count++;
   int child = Count;
   int parent = child / 2;
   while ((child > 1) && (heap[parent] > num))
   {
      heap[child] = heap[parent];
      child = parent;
      parent = child / 2;
   }

   // Insert new entry in heap
   heap[child] = num;
   return true;
}

//------------------------------------------------------------
// Remove an element from the heap.
//------------------------------------------------------------
bool Heap::Remove(int &num)
{
   // Check for empty heap
   if (IsEmpty())
      return false;

   // Save top of heap
   num = heap[1];

   // Swap last value into root position
   heap[1] = heap[Count];
   heap[Count] = -1;
   Count--;

   // Shuffle data down the heap
   int parent = 1;
   int largest = 0;
   while (parent != largest)
   {
      // Check left node
      largest = parent;
      int left = parent * 2;
      if ((left <= Count) && (heap[left] < heap[largest]))
	 largest = left;

      // Check right node
      int right = left + 1;
      if ((right <= Count) && (heap[right] < heap[largest]))
	 largest = right;

      // Swap data values if needed
      if (parent != largest)
      {
	 int temp = heap[parent];
	 heap[parent] = heap[largest];
	 heap[largest] = temp;
	 parent = largest;
	 largest = 0;
      }
   }
   return true;
}

Step #6:
Input size of heap.
20
7
7 9
7 9 13
7 9 13 18
7 9 13 18 10
7 9 12 18 10 13
4 9 7 18 10 13 12
4 9 7 18 10 13 12 18
3 4 7 9 10 13 12 18 18
3 4 7 9 9 13 12 18 18 10
0 3 7 9 4 13 12 18 18 10 9
0 3 5 9 4 7 12 18 18 10 9 13
0 3 5 9 4 7 12 18 18 10 9 13 12
0 3 2 9 4 7 5 18 18 10 9 13 12 12
0 3 2 9 4 7 5 18 18 10 9 13 12 12 7
0 3 2 3 4 7 5 9 18 10 9 13 12 12 7 18
0 3 2 3 4 7 5 7 18 10 9 13 12 12 7 18 9
0 3 2 3 4 7 5 7 9 10 9 13 12 12 7 18 9 18
0 0 2 3 4 7 5 7 3 10 9 13 12 12 7 18 9 18 9
0 0 2 3 4 7 5 7 3 10 9 13 12 12 7 18 9 18 9 12
Removed: 0.
0 3 2 3 4 7 5 7 9 10 9 13 12 12 7 18 9 18 12
Removed: 0.
2 3 5 3 4 7 7 7 9 10 9 13 12 12 12 18 9 18
Removed: 2.
3 3 5 7 4 7 7 9 9 10 9 13 12 12 12 18 18
Removed: 3.
3 4 5 7 9 7 7 9 9 10 18 13 12 12 12 18
Removed: 3.
4 7 5 9 9 7 7 18 9 10 18 13 12 12 12
Removed: 4.
5 7 7 9 9 12 7 18 9 10 18 13 12 12
Removed: 5.
7 9 7 9 9 12 7 18 12 10 18 13 12
Removed: 7.
7 9 7 9 9 12 12 18 12 10 18 13
Removed: 7.
7 9 12 9 9 13 12 18 12 10 18
Removed: 7.
9 9 12 12 9 13 12 18 18 10
Removed: 9.
9 9 12 12 10 13 12 18 18
Removed: 9.
9 10 12 12 18 13 12 18
Removed: 9.
10 12 12 18 18 13 12
Removed: 10.
12 12 12 18 18 13
Removed: 12.
12 13 12 18 18
Removed: 12.
12 13 18 18
Removed: 12.
13 18 18
Removed: 13.
18 18
Removed: 18.
18
Removed: 18.
